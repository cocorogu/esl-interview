[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Coco\AppData\Local\Temp\idea8.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Coco\AppData\Local\Temp\idea8.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.4 (AdoptOpenJDK Java 1.8.0_272)
[debug]       Load.loadUnit: plugins took 208.8261ms
[debug]       Load.loadUnit: defsScala took 0.4445ms
[debug] [Loading] Scanning directory C:\Users\Coco\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Coco\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 23.8606 ms
[debug]           Load.resolveProject(global-plugins) took 42.19ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Coco\.sbt\1.0\plugins, plugins: List(<none>))) took 89.2953ms
[debug] [Loading] Done in C:\Users\Coco\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 116.077ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3215ms
[debug]     Load.loadUnit(file:/C:/Users/Coco/.sbt/1.0/plugins/, ...) took 333.8775ms
[debug]   Load.apply: load took 486.0421ms
[debug]   Load.apply: resolveProjects took 5.9781ms
[debug]   Load.apply: finalTransforms took 56.3077ms
[debug]   Load.apply: config.delegates took 8.991ms
[debug]   Load.apply: Def.make(settings)... took 800.3708ms
[debug]   Load.apply: structureIndex took 91.4733ms
[debug]   Load.apply: mkStreams took 1.9421ms
[info] loading global plugins from C:\Users\Coco\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2715.7539ms
[debug]           Load.loadUnit: plugins took 22.5026ms
[debug]           Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory I:\scala-workplace\esl-interview\project
[debug]             Load.loadUnit: mkEval took 6.4586ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in I:\scala-workplace\esl-interview\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.3822 ms
[info] loading settings for project esl-interview-build from metals.sbt,idea8.sbt ...
[debug]               Load.resolveProject(esl-interview-build) took 2.6703ms
[debug]             Load.loadTransitive: finalizeProject(Project(id esl-interview-build, base: I:\scala-workplace\esl-interview\project, plugins: List(<none>))) took 4.4676ms
[debug] [Loading] Done in I:\scala-workplace\esl-interview\project, returning: (esl-interview-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 130.8606ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.1168ms
[debug]         Load.loadUnit(file:/I:/scala-workplace/esl-interview/project/, ...) took 157.2348ms
[debug]       Load.apply: load took 158.2634ms
[debug]       Load.apply: resolveProjects took 0.0832ms
[debug]       Load.apply: finalTransforms took 6.0233ms
[debug]       Load.apply: config.delegates took 0.2898ms
[debug]       Load.apply: Def.make(settings)... took 71.7638ms
[debug]       Load.apply: structureIndex took 27.1013ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from I:\scala-workplace\esl-interview\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 463.4468ms
[debug]     Load.loadUnit: defsScala took 0.0022ms
[debug] [Loading] Scanning directory I:\scala-workplace\esl-interview
[debug]       Load.loadUnit: mkEval took 0.1577ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in I:\scala-workplace\esl-interview, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(metals.MetalsPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(metals.MetalsPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,metals.MetalsPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.7758 ms
[info] loading settings for project esl-interview from build.sbt ...
[debug]         Load.resolveProject(esl-interview) took 24.3622ms
[debug]       Load.loadTransitive: finalizeProject(Project(id esl-interview, base: I:\scala-workplace\esl-interview, plugins: List(<none>))) took 27.164ms
[debug] [Loading] Done in I:\scala-workplace\esl-interview, returning: (esl-interview)
[debug]     Load.loadUnit: loadedProjectsRaw took 91.157ms
[debug]     Load.loadUnit: cleanEvalClasses took 1.8511ms
[debug]   Load.loadUnit(file:/I:/scala-workplace/esl-interview/, ...) took 556.908ms
[debug] Load.apply: load took 557.8945ms
[debug] Load.apply: resolveProjects took 0.071ms
[debug] Load.apply: finalTransforms took 19.4204ms
[debug] Load.apply: config.delegates took 0.2475ms
[debug] Load.apply: Def.make(settings)... took 67.4549ms
[debug] Load.apply: structureIndex took 17.7987ms
[debug] Load.apply: mkStreams took 0.0023ms
[info] set current project to esl-interview (in build file:/I:/scala-workplace/esl-interview/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51890 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51890, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to esl-interview (in build file:/I:/scala-workplace/esl-interview/)
[debug] > Exec(idea-shell, None, None)
